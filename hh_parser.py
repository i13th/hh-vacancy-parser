#!/usr/bin/env python
# coding: utf-8

# In[1]:


# –£—Å—Ç–∞–Ω–æ–≤–ª–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç schedule.
# get_ipython().system('pip install schedule')


# In[2]:


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫.
import requests  # –†–∞–±–æ—Ç–∞ —Å HTTP-–∑–∞–ø—Ä–æ—Å–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫ API).
import psycopg2  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –∑–∞–ø—Ä–æ—Å—ã).
import schedule  # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—É—Å–∫ –≤ 12:00 –∏ 20:00).
import random    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏).
import time      # –†–∞–±–æ—Ç–∞ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–∞—É–∑—ã –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏).
import logging   # –í–µ–¥–µ–Ω–∏–µ –ª–æ–≥–æ–≤(–∑–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏–π: INFO, ERROR –∏ —Ç.–¥.).
from dotenv import load_dotenv # –§—É–Ω–∫—Ü–∏—è load_dotenv –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ python-dotenv.
                               #–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É.
import os        # –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π.


# In[3]:


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ API HeadHunter.
hh_api_token = None # –¢–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ API hh.ru. None ‚Äî –∑–Ω–∞—á–∏—Ç, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π).


# In[4]:


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .env.

db_config = {
    'dbname': os.getenv('DB_NAME'),
    'user': os.getenv('DB_USER'),
    'password': os.getenv('DB_PASSWORD'),
    'host': os.getenv('DB_HOST'),
    'port': os.getenv('DB_PORT')
}


# In[5]:


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
# –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: INFO –∏ –≤—ã—à–µ (WARNING, ERROR) –∏ —Ñ–æ—Ä–º–∞—Ç –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏: –≤—Ä–µ–º—è, —É—Ä–æ–≤–µ–Ω—å, —Å–æ–æ–±—â–µ–Ω–∏–µ.
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("parser.log", encoding="utf-8"),  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª.
        logging.StreamHandler()                               # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å/Jupyter.
    ]
)

# In[6]:


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã.
def create_table(conn):
    cursor = conn.cursor() # –°–æ–∑–¥–∞—ë—Ç –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤.
    create_table_query = """
        CREATE TABLE IF NOT EXISTS vacancies (
            id SERIAL PRIMARY KEY,
            city VARCHAR(50),
            company VARCHAR(200),
            industry VARCHAR(200),
            title VARCHAR(200),
            keywords TEXT,
            skills TEXT,
            experience VARCHAR(50),
            salary VARCHAR(50),
            url VARCHAR(200) UNIQUE,
            work_format VARCHAR(50)
        )
    """
    # –°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É 'vacancies', –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç.
    # –ü–æ–ª—è: id (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π), –≥–æ—Ä–æ–¥, –∫–æ–º–ø–∞–Ω–∏—è, –æ—Ç—Ä–∞—Å–ª—å, –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏, 
    # –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –Ω–∞–≤—ã–∫–∏, –æ–ø—ã—Ç, –∑–∞—Ä–ø–ª–∞—Ç–∞, —Å—Å—ã–ª–∫–∞, —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã.
    # url ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π (UNIQUE), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.
    cursor.execute(create_table_query)
    conn.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    cursor.close() # –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∫—É—Ä—Å–æ—Ä.
    logging.info("–¢–∞–±–ª–∏—Ü–∞ 'vacancies' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ work_format, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç.
def add_work_format_column_if_missing(conn):
    cursor = conn.cursor() # –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫—É—Ä—Å–æ—Ä.
    try:                   # –ü—Ä–æ–±—É–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É work_format (—Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã: —É–¥–∞–ª—ë–Ω–Ω–æ, –æ—Ñ–∏—Å –∏ —Ç.–ø.).
        cursor.execute("""
            ALTER TABLE vacancies ADD COLUMN work_format VARCHAR(50);
        """)
        logging.info("–ö–æ–ª–æ–Ω–∫–∞ 'work_format' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É 'vacancies'.")
    except psycopg2.errors.DuplicateColumn: # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫—É.
        pass
    except Exception as e: # –õ–æ–≥–∏—Ä—É–µ—Ç –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏.
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏ work_format: {e}")
    finally:
        conn.commit()      # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–∏–ª–∏ –æ—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ).
        cursor.close()     # –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∫—É—Ä—Å–æ—Ä.


# In[7]:


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π.
def get_vacancies(vacancy, city_id, page, schedule_type=None):
    url = 'https://api.hh.ru/vacancies' # –ê–¥—Ä–µ—Å API hh.ru –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π.
    params = {
        'text': vacancy, # –¢–µ–∫—Å—Ç –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ê–Ω–∞–ª–∏—Ç–∏–∫").
        'area': city_id, # ID –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 ‚Äî –ú–æ—Å–∫–≤–∞).
        'per_page': 100, # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–º–∞–∫—Å–∏–º—É–º 100).
        'page': page     # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (0 ‚Äî –ø–µ—Ä–≤–∞—è).
    }
    if schedule_type:    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'remote'), –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
        params['schedule'] = schedule_type  # –¢–æ–ª—å–∫–æ —É–¥–∞–ª—ë–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏.

    headers = {
        'User-Agent': 'YourApp 1.0' # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: –∏–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    }
    if hh_api_token:                # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∑–∞–¥–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
        headers['Authorization'] = f'Bearer {hh_api_token}'

    try: # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –∫ API hh.ru.
        response = requests.get(url, params=params, headers=headers, timeout=10)
        response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω—ã–º.
        return response.json()      # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
    except requests.exceptions.RequestException as e:
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ (—Å–µ—Ç—å, —Ç–∞–π–º–∞—É—Ç, 404 –∏ —Ç.–ø.) ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        return {}


# In[8]:


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—Ä–∞—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏.
def get_industry(company_id):
    if company_id is None:
        return 'Unknown'                              # –ï—Å–ª–∏ ID –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ".
    url = f'https://api.hh.ru/employers/{company_id}' # API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø–∞–Ω–∏–∏.
    try:
        response = requests.get(url, timeout=10)      # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏.
        if response.status_code == 404:
            return 'Unknown'                          # –ï—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ".
        response.raise_for_status()                   # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–µ–Ω –ª–∏ –æ—Ç–≤–µ—Ç.
        data = response.json()                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON.
        if 'industries' in data and len(data['industries']) > 0:
            # –ë–µ—Ä—ë–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏.
            return data['industries'][0].get('name', 'Unknown')
    except Exception as e:
            # –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ".
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—Ä–∞—Å–ª–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {company_id}: {e}")
    return 'Unknown'


# In[9]:


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ (skills).
def get_vacancy_skills(vacancy_id):
    url = f'https://api.hh.ru/vacancies/{vacancy_id}' # API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏.
    try:
        response = requests.get(url, timeout=10)      # –ó–∞–ø—Ä–æ—Å –∫ API.
        response.raise_for_status()                   # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏.
        data = response.json()                        # –î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏.
        skills = [skill['name'] for skill in data.get('key_skills', [])]
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤. –ï—Å–ª–∏ –µ—Å—Ç—å ‚Äî –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤ —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.
        return ', '.join(skills) if skills else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    except Exception as e:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤. –ï—Å–ª–∏ –µ—Å—Ç—å ‚Äî –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤ —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_id}: {e}")
        return '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è'


# In[10]:


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞.
def parse_vacancies():
    # üîÅ –ì–æ—Ä–æ–¥–∞ –∏ –∏—Ö ID –Ω–∞ hh.ru (15 –∫—Ä—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤).
    cities = {
        '–ú–æ—Å–∫–≤–∞': 1,
        '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 2,
        '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 3,
        '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 4,
        '–ö–∞–∑–∞–Ω—å': 87,
        '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': 66,
        '–ß–µ–ª—è–±–∏–Ω—Å–∫': 83,
        '–°–∞–º–∞—Ä–∞': 78,
        '–û–º—Å–∫': 131,
        '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É': 80,
        '–£—Ñ–∞': 96,
        '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': 52,
        '–í–æ—Ä–æ–Ω–µ–∂': 105,
        '–ü–µ—Ä–º—å': 53,
        '–í–æ–ª–≥–æ–≥—Ä–∞–¥': 23
    }

    # üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π.
    vacancies = [
        '–ê–Ω–∞–ª–∏—Ç–∏–∫',
        'Analyst'
    ]

    try:
                                                    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL.
        with psycopg2.connect(**db_config) as conn:
            create_table(conn)                      # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç.
            add_work_format_column_if_missing(conn) # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É work_format, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.

            for city, city_id in cities.items():     # –¶–∏–∫–ª –ø–æ –≤—Å–µ–º –≥–æ—Ä–æ–¥–∞–º.
                for vacancy in vacancies:            # –¶–∏–∫–ª –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.
                    logging.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–π: '{vacancy}' –≤ –≥–æ—Ä–æ–¥–µ {city}") # –õ–æ–≥: –Ω–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥.

                    # üîπ –î–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤ –∫—Ä–æ–º–µ –ú–æ—Å–∫–≤—ã ‚Äî –∏—â–µ–º —Ç–æ–ª—å–∫–æ —É–¥–∞–ª—ë–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏.
                    schedule_filter = None          # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞.
                    if city != '–ú–æ—Å–∫–≤–∞':
                        schedule_filter = 'remote'  # –¢–æ–ª—å–∫–æ —É–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞.

                    page = 0                        # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
                    while True:                     # –¶–∏–∫–ª –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º.
                        try:
                            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —É—á—ë—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≥—Ä–∞—Ñ–∏–∫—É.
                            data = get_vacancies(vacancy, city_id, page, schedule_type=schedule_filter)

                            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π.
                            items = data.get('items', [])
                            if not items:           # –ï—Å–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ—Ç ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞.
                                break

                            with conn.cursor() as cursor: # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä.
                                for item in items:        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏.
                                    # –§–∏–ª—å—Ç—Ä: –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.
                                    if vacancy.lower() not in item['name'].lower():
                                        continue          # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç.
                                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
                                    title = f"{item['name']} ({city})"                      # –ù–∞–∑–≤–∞–Ω–∏–µ + –≥–æ—Ä–æ–¥.
                                    keywords = item['snippet'].get('requirement', '') or '' # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑ —Å–Ω–∏–ø–ø–µ—Ç–∞.
                                    skills = get_vacancy_skills(item['id'])                 # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≤—ã–∫–∏.
                                    company = item['employer']['name']                      # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.
                                    industry = get_industry(item['employer'].get('id'))     # –û—Ç—Ä–∞—Å–ª—å –∫–æ–º–ø–∞–Ω–∏–∏.
                                    experience = item['experience'].get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ') # –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã.
                                    salary = item['salary']                                 # –ó–∞—Ä–ø–ª–∞—Ç–∞.
                                    if salary:                                              # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞.
                                        salary_from = salary.get('from')                    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è.
                                        salary_currency = salary.get('currency', '')        # –í–∞–ª—é—Ç–∞.
                                        salary = f"{salary_from} {salary_currency}" if salary_from else "–∑/–ø –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                                    else:
                                        salary = "–∑/–ø –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

                                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ 'work_format' –∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–∏.
                                    # –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã (—É–¥–∞–ª—ë–Ω–Ω–æ, –ø–æ–ª–Ω—ã–π –¥–µ–Ω—å –∏ —Ç.–ø.).
                                    # –ï—Å–ª–∏ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ [], —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫.
                                    work_format_list = item.get('work_format', [])
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ work_format_list.
                                    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç ‚Äî –∑–Ω–∞—á–∏—Ç, —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã —É–∫–∞–∑–∞–Ω –≤ API.
                                    if work_format_list:
                                        # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞.
                                        # –ò–∑ –Ω–µ–≥–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ 'name', –Ω–∞–ø—Ä–∏–º–µ—Ä: "–£–¥–∞–ª—ë–Ω–Ω–æ".
                                        # –ï—Å–ª–∏ –∫–ª—é—á 'name' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
                                        work_format = work_format_list[0].get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                                    else:
                                        # –ï—Å–ª–∏ work_format –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –ø–æ–ª–µ 'schedule'.
                                        # –ù–∞–ø—Ä–∏–º–µ—Ä: {"id": "remote", "name": "–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞"}
                                        schedule_data = item.get('schedule')
                                        if schedule_data and isinstance(schedule_data, dict):
                                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞".
                                            # –ï—Å–ª–∏ 'name' –Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
                                            work_format = schedule_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                                        else:
                                            # –ï—Å–ª–∏ –Ω–∏ work_format, –Ω–∏ schedule –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã ‚Äî —Å—Ç–∞–≤–∏–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
                                            work_format = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                                    
                                    # üîÅ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ work_format ‚Äî —Å—Ç—Ä–æ–∫–∞, –Ω–µ None.
                                    if not isinstance(work_format, str):
                                        work_format = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                                        
                                    url = item['alternate_url'] # –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –Ω–∞ —Å–∞–π—Ç–µ hh.ru.
                                    
                                    logging.debug(f"work_format –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {item['id']}: '{work_format}'")
                                    
                                    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ (–≤ –∫–æ–ª–æ–Ω–∫—É work_format).
                                    insert_query = """
                                        INSERT INTO vacancies 
                                        (city, 
                                        company, 
                                        industry, 
                                        title, 
                                        keywords, 
                                        skills, 
                                        experience, 
                                        salary, 
                                        url, 
                                        work_format) 
                                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                                        ON CONFLICT (url) DO NOTHING
                                    """
                                    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å—Ç–∞–≤–∫—É.
                                    try:
                                        cursor.execute(insert_query, (
                                            city, 
                                            company, 
                                            industry, 
                                            title, 
                                            keywords, 
                                            skills, 
                                            experience, 
                                            salary, 
                                            url, 
                                            work_format
                                        ))
                                    except Exception as e:
                                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏ {item['id']}: {e}")
                                        continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é.

                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
                            conn.commit()
                            logging.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –¥–ª—è '{vacancy}' –≤ {city} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â—ë —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
                            if page >= data.get('pages', 1) - 1:
                                break                         # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.

                            page += 1                         # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
                            time.sleep(random.uniform(3, 6))  # –ê–Ω—Ç–∏-–±–∞–Ω –∑–∞–¥–µ—Ä–∂–∫–∞.
                                                              # –ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 3 –¥–æ 6 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API.

                        except Exception as e:
                            # –ü—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏.
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page} –¥–ª—è '{vacancy}' –≤ {city}: {e}")
                            break  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏.

            logging.info("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ PostgreSQL.") # –õ–æ–≥: –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}", exc_info=True) # –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î ‚Äî –ª–æ–≥–∏—Ä—É–µ–º —Å –¥–µ—Ç–∞–ª—è–º–∏.


# In[11]:


# –ó–∞–¥–∞—á–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
def run_parsing_job():
    logging.info("üîÑ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    parse_vacancies() # –í—ã–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞.


# In[12]:


# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.
schedule.every().day.at("12:00").do(run_parsing_job) # –ù–∞–∑–Ω–∞—á–∞–µ—Ç –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ run_parsing_job() –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00.
schedule.every().day.at("20:00").do(run_parsing_job) # –ò –≤—Ç–æ—Ä–æ–π –∑–∞–ø—É—Å–∫ ‚Äî –≤ 20:00.


# In[ ]:


# –ó–∞–ø—É—Å–∫.
if __name__ == "__main__": # –õ–æ–≥: —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω.
    logging.info("–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞. –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞...")
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –Ω–∞—Å—Ç–∞–ª–æ –ª–∏ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞.
    while True:
        schedule.run_pending() # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.
        time.sleep(1)          # –ñ–¥—ë—Ç 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π.


# In[ ]:




